// Mocks generated by Mockito 5.4.6 from annotations
// in alimenta_ai/test/caixa_branca/audio_food_registration_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i12;
import 'dart:convert' as _i17;
import 'dart:io' as _i10;
import 'dart:typed_data' as _i13;

import 'package:audio_session/audio_session.dart' as _i15;
import 'package:dio/src/adapter.dart' as _i5;
import 'package:dio/src/cancel_token.dart' as _i16;
import 'package:dio/src/dio.dart' as _i9;
import 'package:dio/src/dio_mixin.dart' as _i7;
import 'package:dio/src/options.dart' as _i4;
import 'package:dio/src/response.dart' as _i8;
import 'package:dio/src/transformer.dart' as _i6;
import 'package:just_audio/just_audio.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i14;
import 'package:record/src/record.dart' as _i11;
import 'package:record_platform_interface/record_platform_interface.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAmplitude_0 extends _i1.SmartFake implements _i2.Amplitude {
  _FakeAmplitude_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePlaybackEvent_1 extends _i1.SmartFake implements _i3.PlaybackEvent {
  _FakePlaybackEvent_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDuration_2 extends _i1.SmartFake implements Duration {
  _FakeDuration_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePlayerState_3 extends _i1.SmartFake implements _i3.PlayerState {
  _FakePlayerState_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBaseOptions_4 extends _i1.SmartFake implements _i4.BaseOptions {
  _FakeBaseOptions_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHttpClientAdapter_5 extends _i1.SmartFake
    implements _i5.HttpClientAdapter {
  _FakeHttpClientAdapter_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTransformer_6 extends _i1.SmartFake implements _i6.Transformer {
  _FakeTransformer_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInterceptors_7 extends _i1.SmartFake implements _i7.Interceptors {
  _FakeInterceptors_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_8<T1> extends _i1.SmartFake implements _i8.Response<T1> {
  _FakeResponse_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDio_9 extends _i1.SmartFake implements _i9.Dio {
  _FakeDio_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFile_10 extends _i1.SmartFake implements _i10.File {
  _FakeFile_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUri_11 extends _i1.SmartFake implements Uri {
  _FakeUri_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDirectory_12 extends _i1.SmartFake implements _i10.Directory {
  _FakeDirectory_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFileSystemEntity_13 extends _i1.SmartFake
    implements _i10.FileSystemEntity {
  _FakeFileSystemEntity_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_14 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRandomAccessFile_15 extends _i1.SmartFake
    implements _i10.RandomAccessFile {
  _FakeRandomAccessFile_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIOSink_16 extends _i1.SmartFake implements _i10.IOSink {
  _FakeIOSink_16(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFileStat_17 extends _i1.SmartFake implements _i10.FileStat {
  _FakeFileStat_17(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AudioRecorder].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioRecorder extends _i1.Mock implements _i11.AudioRecorder {
  MockAudioRecorder() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<void> start(
    _i2.RecordConfig? config, {
    required String? path,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #start,
          [config],
          {#path: path},
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<_i12.Stream<_i13.Uint8List>> startStream(
          _i2.RecordConfig? config) =>
      (super.noSuchMethod(
        Invocation.method(
          #startStream,
          [config],
        ),
        returnValue: _i12.Future<_i12.Stream<_i13.Uint8List>>.value(
            _i12.Stream<_i13.Uint8List>.empty()),
      ) as _i12.Future<_i12.Stream<_i13.Uint8List>>);

  @override
  _i12.Future<String?> stop() => (super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
        ),
        returnValue: _i12.Future<String?>.value(),
      ) as _i12.Future<String?>);

  @override
  _i12.Future<void> cancel() => (super.noSuchMethod(
        Invocation.method(
          #cancel,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> pause() => (super.noSuchMethod(
        Invocation.method(
          #pause,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> resume() => (super.noSuchMethod(
        Invocation.method(
          #resume,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<bool> isRecording() => (super.noSuchMethod(
        Invocation.method(
          #isRecording,
          [],
        ),
        returnValue: _i12.Future<bool>.value(false),
      ) as _i12.Future<bool>);

  @override
  _i12.Future<bool> isPaused() => (super.noSuchMethod(
        Invocation.method(
          #isPaused,
          [],
        ),
        returnValue: _i12.Future<bool>.value(false),
      ) as _i12.Future<bool>);

  @override
  _i12.Future<bool> hasPermission() => (super.noSuchMethod(
        Invocation.method(
          #hasPermission,
          [],
        ),
        returnValue: _i12.Future<bool>.value(false),
      ) as _i12.Future<bool>);

  @override
  _i12.Future<List<_i2.InputDevice>> listInputDevices() => (super.noSuchMethod(
        Invocation.method(
          #listInputDevices,
          [],
        ),
        returnValue:
            _i12.Future<List<_i2.InputDevice>>.value(<_i2.InputDevice>[]),
      ) as _i12.Future<List<_i2.InputDevice>>);

  @override
  _i12.Future<_i2.Amplitude> getAmplitude() => (super.noSuchMethod(
        Invocation.method(
          #getAmplitude,
          [],
        ),
        returnValue: _i12.Future<_i2.Amplitude>.value(_FakeAmplitude_0(
          this,
          Invocation.method(
            #getAmplitude,
            [],
          ),
        )),
      ) as _i12.Future<_i2.Amplitude>);

  @override
  _i12.Future<bool> isEncoderSupported(_i2.AudioEncoder? encoder) =>
      (super.noSuchMethod(
        Invocation.method(
          #isEncoderSupported,
          [encoder],
        ),
        returnValue: _i12.Future<bool>.value(false),
      ) as _i12.Future<bool>);

  @override
  _i12.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Stream<_i2.RecordState> onStateChanged() => (super.noSuchMethod(
        Invocation.method(
          #onStateChanged,
          [],
        ),
        returnValue: _i12.Stream<_i2.RecordState>.empty(),
      ) as _i12.Stream<_i2.RecordState>);

  @override
  _i12.Stream<_i2.Amplitude> onAmplitudeChanged(Duration? interval) =>
      (super.noSuchMethod(
        Invocation.method(
          #onAmplitudeChanged,
          [interval],
        ),
        returnValue: _i12.Stream<_i2.Amplitude>.empty(),
      ) as _i12.Stream<_i2.Amplitude>);

  @override
  List<int> convertBytesToInt16(
    _i13.Uint8List? bytes, [
    dynamic endian = _i13.Endian.little,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #convertBytesToInt16,
          [
            bytes,
            endian,
          ],
        ),
        returnValue: <int>[],
      ) as List<int>);
}

/// A class which mocks [AudioPlayer].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioPlayer extends _i1.Mock implements _i3.AudioPlayer {
  MockAudioPlayer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.PlaybackEvent get playbackEvent => (super.noSuchMethod(
        Invocation.getter(#playbackEvent),
        returnValue: _FakePlaybackEvent_1(
          this,
          Invocation.getter(#playbackEvent),
        ),
      ) as _i3.PlaybackEvent);

  @override
  _i12.Stream<_i3.PlaybackEvent> get playbackEventStream => (super.noSuchMethod(
        Invocation.getter(#playbackEventStream),
        returnValue: _i12.Stream<_i3.PlaybackEvent>.empty(),
      ) as _i12.Stream<_i3.PlaybackEvent>);

  @override
  _i12.Stream<Duration?> get durationStream => (super.noSuchMethod(
        Invocation.getter(#durationStream),
        returnValue: _i12.Stream<Duration?>.empty(),
      ) as _i12.Stream<Duration?>);

  @override
  _i3.ProcessingState get processingState => (super.noSuchMethod(
        Invocation.getter(#processingState),
        returnValue: _i3.ProcessingState.idle,
      ) as _i3.ProcessingState);

  @override
  _i12.Stream<_i3.ProcessingState> get processingStateStream =>
      (super.noSuchMethod(
        Invocation.getter(#processingStateStream),
        returnValue: _i12.Stream<_i3.ProcessingState>.empty(),
      ) as _i12.Stream<_i3.ProcessingState>);

  @override
  bool get playing => (super.noSuchMethod(
        Invocation.getter(#playing),
        returnValue: false,
      ) as bool);

  @override
  _i12.Stream<bool> get playingStream => (super.noSuchMethod(
        Invocation.getter(#playingStream),
        returnValue: _i12.Stream<bool>.empty(),
      ) as _i12.Stream<bool>);

  @override
  double get volume => (super.noSuchMethod(
        Invocation.getter(#volume),
        returnValue: 0.0,
      ) as double);

  @override
  _i12.Stream<double> get volumeStream => (super.noSuchMethod(
        Invocation.getter(#volumeStream),
        returnValue: _i12.Stream<double>.empty(),
      ) as _i12.Stream<double>);

  @override
  double get speed => (super.noSuchMethod(
        Invocation.getter(#speed),
        returnValue: 0.0,
      ) as double);

  @override
  _i12.Stream<double> get speedStream => (super.noSuchMethod(
        Invocation.getter(#speedStream),
        returnValue: _i12.Stream<double>.empty(),
      ) as _i12.Stream<double>);

  @override
  double get pitch => (super.noSuchMethod(
        Invocation.getter(#pitch),
        returnValue: 0.0,
      ) as double);

  @override
  _i12.Stream<double> get pitchStream => (super.noSuchMethod(
        Invocation.getter(#pitchStream),
        returnValue: _i12.Stream<double>.empty(),
      ) as _i12.Stream<double>);

  @override
  bool get skipSilenceEnabled => (super.noSuchMethod(
        Invocation.getter(#skipSilenceEnabled),
        returnValue: false,
      ) as bool);

  @override
  _i12.Stream<bool> get skipSilenceEnabledStream => (super.noSuchMethod(
        Invocation.getter(#skipSilenceEnabledStream),
        returnValue: _i12.Stream<bool>.empty(),
      ) as _i12.Stream<bool>);

  @override
  Duration get bufferedPosition => (super.noSuchMethod(
        Invocation.getter(#bufferedPosition),
        returnValue: _FakeDuration_2(
          this,
          Invocation.getter(#bufferedPosition),
        ),
      ) as Duration);

  @override
  _i12.Stream<Duration> get bufferedPositionStream => (super.noSuchMethod(
        Invocation.getter(#bufferedPositionStream),
        returnValue: _i12.Stream<Duration>.empty(),
      ) as _i12.Stream<Duration>);

  @override
  _i12.Stream<_i3.IcyMetadata?> get icyMetadataStream => (super.noSuchMethod(
        Invocation.getter(#icyMetadataStream),
        returnValue: _i12.Stream<_i3.IcyMetadata?>.empty(),
      ) as _i12.Stream<_i3.IcyMetadata?>);

  @override
  _i3.PlayerState get playerState => (super.noSuchMethod(
        Invocation.getter(#playerState),
        returnValue: _FakePlayerState_3(
          this,
          Invocation.getter(#playerState),
        ),
      ) as _i3.PlayerState);

  @override
  _i12.Stream<_i3.PlayerState> get playerStateStream => (super.noSuchMethod(
        Invocation.getter(#playerStateStream),
        returnValue: _i12.Stream<_i3.PlayerState>.empty(),
      ) as _i12.Stream<_i3.PlayerState>);

  @override
  _i12.Stream<List<_i3.IndexedAudioSource>?> get sequenceStream =>
      (super.noSuchMethod(
        Invocation.getter(#sequenceStream),
        returnValue: _i12.Stream<List<_i3.IndexedAudioSource>?>.empty(),
      ) as _i12.Stream<List<_i3.IndexedAudioSource>?>);

  @override
  _i12.Stream<List<int>?> get shuffleIndicesStream => (super.noSuchMethod(
        Invocation.getter(#shuffleIndicesStream),
        returnValue: _i12.Stream<List<int>?>.empty(),
      ) as _i12.Stream<List<int>?>);

  @override
  _i12.Stream<int?> get currentIndexStream => (super.noSuchMethod(
        Invocation.getter(#currentIndexStream),
        returnValue: _i12.Stream<int?>.empty(),
      ) as _i12.Stream<int?>);

  @override
  _i12.Stream<_i3.SequenceState?> get sequenceStateStream =>
      (super.noSuchMethod(
        Invocation.getter(#sequenceStateStream),
        returnValue: _i12.Stream<_i3.SequenceState?>.empty(),
      ) as _i12.Stream<_i3.SequenceState?>);

  @override
  bool get hasNext => (super.noSuchMethod(
        Invocation.getter(#hasNext),
        returnValue: false,
      ) as bool);

  @override
  bool get hasPrevious => (super.noSuchMethod(
        Invocation.getter(#hasPrevious),
        returnValue: false,
      ) as bool);

  @override
  _i3.LoopMode get loopMode => (super.noSuchMethod(
        Invocation.getter(#loopMode),
        returnValue: _i3.LoopMode.off,
      ) as _i3.LoopMode);

  @override
  _i12.Stream<_i3.LoopMode> get loopModeStream => (super.noSuchMethod(
        Invocation.getter(#loopModeStream),
        returnValue: _i12.Stream<_i3.LoopMode>.empty(),
      ) as _i12.Stream<_i3.LoopMode>);

  @override
  bool get shuffleModeEnabled => (super.noSuchMethod(
        Invocation.getter(#shuffleModeEnabled),
        returnValue: false,
      ) as bool);

  @override
  _i12.Stream<bool> get shuffleModeEnabledStream => (super.noSuchMethod(
        Invocation.getter(#shuffleModeEnabledStream),
        returnValue: _i12.Stream<bool>.empty(),
      ) as _i12.Stream<bool>);

  @override
  _i12.Stream<int?> get androidAudioSessionIdStream => (super.noSuchMethod(
        Invocation.getter(#androidAudioSessionIdStream),
        returnValue: _i12.Stream<int?>.empty(),
      ) as _i12.Stream<int?>);

  @override
  _i12.Stream<_i3.PositionDiscontinuity> get positionDiscontinuityStream =>
      (super.noSuchMethod(
        Invocation.getter(#positionDiscontinuityStream),
        returnValue: _i12.Stream<_i3.PositionDiscontinuity>.empty(),
      ) as _i12.Stream<_i3.PositionDiscontinuity>);

  @override
  bool get automaticallyWaitsToMinimizeStalling => (super.noSuchMethod(
        Invocation.getter(#automaticallyWaitsToMinimizeStalling),
        returnValue: false,
      ) as bool);

  @override
  bool get canUseNetworkResourcesForLiveStreamingWhilePaused =>
      (super.noSuchMethod(
        Invocation.getter(#canUseNetworkResourcesForLiveStreamingWhilePaused),
        returnValue: false,
      ) as bool);

  @override
  double get preferredPeakBitRate => (super.noSuchMethod(
        Invocation.getter(#preferredPeakBitRate),
        returnValue: 0.0,
      ) as double);

  @override
  bool get allowsExternalPlayback => (super.noSuchMethod(
        Invocation.getter(#allowsExternalPlayback),
        returnValue: false,
      ) as bool);

  @override
  String get webSinkId => (super.noSuchMethod(
        Invocation.getter(#webSinkId),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#webSinkId),
        ),
      ) as String);

  @override
  Duration get position => (super.noSuchMethod(
        Invocation.getter(#position),
        returnValue: _FakeDuration_2(
          this,
          Invocation.getter(#position),
        ),
      ) as Duration);

  @override
  _i12.Stream<Duration> get positionStream => (super.noSuchMethod(
        Invocation.getter(#positionStream),
        returnValue: _i12.Stream<Duration>.empty(),
      ) as _i12.Stream<Duration>);

  @override
  _i12.Stream<Duration> createPositionStream({
    int? steps = 800,
    Duration? minPeriod = const Duration(milliseconds: 200),
    Duration? maxPeriod = const Duration(milliseconds: 200),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createPositionStream,
          [],
          {
            #steps: steps,
            #minPeriod: minPeriod,
            #maxPeriod: maxPeriod,
          },
        ),
        returnValue: _i12.Stream<Duration>.empty(),
      ) as _i12.Stream<Duration>);

  @override
  _i12.Future<Duration?> setUrl(
    String? url, {
    Map<String, String>? headers,
    Duration? initialPosition,
    bool? preload = true,
    dynamic tag,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setUrl,
          [url],
          {
            #headers: headers,
            #initialPosition: initialPosition,
            #preload: preload,
            #tag: tag,
          },
        ),
        returnValue: _i12.Future<Duration?>.value(),
      ) as _i12.Future<Duration?>);

  @override
  _i12.Future<Duration?> setFilePath(
    String? filePath, {
    Duration? initialPosition,
    bool? preload = true,
    dynamic tag,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setFilePath,
          [filePath],
          {
            #initialPosition: initialPosition,
            #preload: preload,
            #tag: tag,
          },
        ),
        returnValue: _i12.Future<Duration?>.value(),
      ) as _i12.Future<Duration?>);

  @override
  _i12.Future<Duration?> setAsset(
    String? assetPath, {
    String? package,
    bool? preload = true,
    Duration? initialPosition,
    dynamic tag,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setAsset,
          [assetPath],
          {
            #package: package,
            #preload: preload,
            #initialPosition: initialPosition,
            #tag: tag,
          },
        ),
        returnValue: _i12.Future<Duration?>.value(),
      ) as _i12.Future<Duration?>);

  @override
  _i12.Future<Duration?> setAudioSource(
    _i3.AudioSource? source, {
    bool? preload = true,
    int? initialIndex,
    Duration? initialPosition,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setAudioSource,
          [source],
          {
            #preload: preload,
            #initialIndex: initialIndex,
            #initialPosition: initialPosition,
          },
        ),
        returnValue: _i12.Future<Duration?>.value(),
      ) as _i12.Future<Duration?>);

  @override
  _i12.Future<Duration?> load() => (super.noSuchMethod(
        Invocation.method(
          #load,
          [],
        ),
        returnValue: _i12.Future<Duration?>.value(),
      ) as _i12.Future<Duration?>);

  @override
  _i12.Future<Duration?> setClip({
    Duration? start,
    Duration? end,
    dynamic tag,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setClip,
          [],
          {
            #start: start,
            #end: end,
            #tag: tag,
          },
        ),
        returnValue: _i12.Future<Duration?>.value(),
      ) as _i12.Future<Duration?>);

  @override
  _i12.Future<void> play() => (super.noSuchMethod(
        Invocation.method(
          #play,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> pause() => (super.noSuchMethod(
        Invocation.method(
          #pause,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> stop() => (super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> setVolume(double? volume) => (super.noSuchMethod(
        Invocation.method(
          #setVolume,
          [volume],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> setSkipSilenceEnabled(bool? enabled) => (super.noSuchMethod(
        Invocation.method(
          #setSkipSilenceEnabled,
          [enabled],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> setSpeed(double? speed) => (super.noSuchMethod(
        Invocation.method(
          #setSpeed,
          [speed],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> setPitch(double? pitch) => (super.noSuchMethod(
        Invocation.method(
          #setPitch,
          [pitch],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> setLoopMode(_i3.LoopMode? mode) => (super.noSuchMethod(
        Invocation.method(
          #setLoopMode,
          [mode],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> setShuffleModeEnabled(bool? enabled) => (super.noSuchMethod(
        Invocation.method(
          #setShuffleModeEnabled,
          [enabled],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> shuffle() => (super.noSuchMethod(
        Invocation.method(
          #shuffle,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> setAutomaticallyWaitsToMinimizeStalling(
          bool? automaticallyWaitsToMinimizeStalling) =>
      (super.noSuchMethod(
        Invocation.method(
          #setAutomaticallyWaitsToMinimizeStalling,
          [automaticallyWaitsToMinimizeStalling],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> setCanUseNetworkResourcesForLiveStreamingWhilePaused(
          bool? canUseNetworkResourcesForLiveStreamingWhilePaused) =>
      (super.noSuchMethod(
        Invocation.method(
          #setCanUseNetworkResourcesForLiveStreamingWhilePaused,
          [canUseNetworkResourcesForLiveStreamingWhilePaused],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> setPreferredPeakBitRate(double? preferredPeakBitRate) =>
      (super.noSuchMethod(
        Invocation.method(
          #setPreferredPeakBitRate,
          [preferredPeakBitRate],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> setAllowsExternalPlayback(bool? allowsExternalPlayback) =>
      (super.noSuchMethod(
        Invocation.method(
          #setAllowsExternalPlayback,
          [allowsExternalPlayback],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> seek(
    Duration? position, {
    int? index,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #seek,
          [position],
          {#index: index},
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> seekToNext() => (super.noSuchMethod(
        Invocation.method(
          #seekToNext,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> seekToPrevious() => (super.noSuchMethod(
        Invocation.method(
          #seekToPrevious,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> setAndroidAudioAttributes(
          _i15.AndroidAudioAttributes? audioAttributes) =>
      (super.noSuchMethod(
        Invocation.method(
          #setAndroidAudioAttributes,
          [audioAttributes],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> setWebCrossOrigin(_i3.WebCrossOrigin? webCrossOrigin) =>
      (super.noSuchMethod(
        Invocation.method(
          #setWebCrossOrigin,
          [webCrossOrigin],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> setWebSinkId(String? webSinkId) => (super.noSuchMethod(
        Invocation.method(
          #setWebSinkId,
          [webSinkId],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);
}

/// A class which mocks [Dio].
///
/// See the documentation for Mockito's code generation for more information.
class MockDio extends _i1.Mock implements _i9.Dio {
  MockDio() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.BaseOptions get options => (super.noSuchMethod(
        Invocation.getter(#options),
        returnValue: _FakeBaseOptions_4(
          this,
          Invocation.getter(#options),
        ),
      ) as _i4.BaseOptions);

  @override
  _i5.HttpClientAdapter get httpClientAdapter => (super.noSuchMethod(
        Invocation.getter(#httpClientAdapter),
        returnValue: _FakeHttpClientAdapter_5(
          this,
          Invocation.getter(#httpClientAdapter),
        ),
      ) as _i5.HttpClientAdapter);

  @override
  _i6.Transformer get transformer => (super.noSuchMethod(
        Invocation.getter(#transformer),
        returnValue: _FakeTransformer_6(
          this,
          Invocation.getter(#transformer),
        ),
      ) as _i6.Transformer);

  @override
  _i7.Interceptors get interceptors => (super.noSuchMethod(
        Invocation.getter(#interceptors),
        returnValue: _FakeInterceptors_7(
          this,
          Invocation.getter(#interceptors),
        ),
      ) as _i7.Interceptors);

  @override
  set options(_i4.BaseOptions? _options) => super.noSuchMethod(
        Invocation.setter(
          #options,
          _options,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set httpClientAdapter(_i5.HttpClientAdapter? _httpClientAdapter) =>
      super.noSuchMethod(
        Invocation.setter(
          #httpClientAdapter,
          _httpClientAdapter,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set transformer(_i6.Transformer? _transformer) => super.noSuchMethod(
        Invocation.setter(
          #transformer,
          _transformer,
        ),
        returnValueForMissingStub: null,
      );

  @override
  void close({bool? force = false}) => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
          {#force: force},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i12.Future<_i8.Response<T>> head<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i4.Options? options,
    _i16.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i12.Future<_i8.Response<T>>.value(_FakeResponse_8<T>(
          this,
          Invocation.method(
            #head,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i12.Future<_i8.Response<T>>);

  @override
  _i12.Future<_i8.Response<T>> headUri<T>(
    Uri? uri, {
    Object? data,
    _i4.Options? options,
    _i16.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #headUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i12.Future<_i8.Response<T>>.value(_FakeResponse_8<T>(
          this,
          Invocation.method(
            #headUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i12.Future<_i8.Response<T>>);

  @override
  _i12.Future<_i8.Response<T>> get<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i4.Options? options,
    _i16.CancelToken? cancelToken,
    _i4.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i12.Future<_i8.Response<T>>.value(_FakeResponse_8<T>(
          this,
          Invocation.method(
            #get,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i12.Future<_i8.Response<T>>);

  @override
  _i12.Future<_i8.Response<T>> getUri<T>(
    Uri? uri, {
    Object? data,
    _i4.Options? options,
    _i16.CancelToken? cancelToken,
    _i4.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i12.Future<_i8.Response<T>>.value(_FakeResponse_8<T>(
          this,
          Invocation.method(
            #getUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i12.Future<_i8.Response<T>>);

  @override
  _i12.Future<_i8.Response<T>> post<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i4.Options? options,
    _i16.CancelToken? cancelToken,
    _i4.ProgressCallback? onSendProgress,
    _i4.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i12.Future<_i8.Response<T>>.value(_FakeResponse_8<T>(
          this,
          Invocation.method(
            #post,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i12.Future<_i8.Response<T>>);

  @override
  _i12.Future<_i8.Response<T>> postUri<T>(
    Uri? uri, {
    Object? data,
    _i4.Options? options,
    _i16.CancelToken? cancelToken,
    _i4.ProgressCallback? onSendProgress,
    _i4.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #postUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i12.Future<_i8.Response<T>>.value(_FakeResponse_8<T>(
          this,
          Invocation.method(
            #postUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i12.Future<_i8.Response<T>>);

  @override
  _i12.Future<_i8.Response<T>> put<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i4.Options? options,
    _i16.CancelToken? cancelToken,
    _i4.ProgressCallback? onSendProgress,
    _i4.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i12.Future<_i8.Response<T>>.value(_FakeResponse_8<T>(
          this,
          Invocation.method(
            #put,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i12.Future<_i8.Response<T>>);

  @override
  _i12.Future<_i8.Response<T>> putUri<T>(
    Uri? uri, {
    Object? data,
    _i4.Options? options,
    _i16.CancelToken? cancelToken,
    _i4.ProgressCallback? onSendProgress,
    _i4.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i12.Future<_i8.Response<T>>.value(_FakeResponse_8<T>(
          this,
          Invocation.method(
            #putUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i12.Future<_i8.Response<T>>);

  @override
  _i12.Future<_i8.Response<T>> patch<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i4.Options? options,
    _i16.CancelToken? cancelToken,
    _i4.ProgressCallback? onSendProgress,
    _i4.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i12.Future<_i8.Response<T>>.value(_FakeResponse_8<T>(
          this,
          Invocation.method(
            #patch,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i12.Future<_i8.Response<T>>);

  @override
  _i12.Future<_i8.Response<T>> patchUri<T>(
    Uri? uri, {
    Object? data,
    _i4.Options? options,
    _i16.CancelToken? cancelToken,
    _i4.ProgressCallback? onSendProgress,
    _i4.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patchUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i12.Future<_i8.Response<T>>.value(_FakeResponse_8<T>(
          this,
          Invocation.method(
            #patchUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i12.Future<_i8.Response<T>>);

  @override
  _i12.Future<_i8.Response<T>> delete<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i4.Options? options,
    _i16.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i12.Future<_i8.Response<T>>.value(_FakeResponse_8<T>(
          this,
          Invocation.method(
            #delete,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i12.Future<_i8.Response<T>>);

  @override
  _i12.Future<_i8.Response<T>> deleteUri<T>(
    Uri? uri, {
    Object? data,
    _i4.Options? options,
    _i16.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i12.Future<_i8.Response<T>>.value(_FakeResponse_8<T>(
          this,
          Invocation.method(
            #deleteUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i12.Future<_i8.Response<T>>);

  @override
  _i12.Future<_i8.Response<dynamic>> download(
    String? urlPath,
    dynamic savePath, {
    _i4.ProgressCallback? onReceiveProgress,
    Map<String, dynamic>? queryParameters,
    _i16.CancelToken? cancelToken,
    bool? deleteOnError = true,
    _i4.FileAccessMode? fileAccessMode = _i4.FileAccessMode.write,
    String? lengthHeader = 'content-length',
    Object? data,
    _i4.Options? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #download,
          [
            urlPath,
            savePath,
          ],
          {
            #onReceiveProgress: onReceiveProgress,
            #queryParameters: queryParameters,
            #cancelToken: cancelToken,
            #deleteOnError: deleteOnError,
            #fileAccessMode: fileAccessMode,
            #lengthHeader: lengthHeader,
            #data: data,
            #options: options,
          },
        ),
        returnValue:
            _i12.Future<_i8.Response<dynamic>>.value(_FakeResponse_8<dynamic>(
          this,
          Invocation.method(
            #download,
            [
              urlPath,
              savePath,
            ],
            {
              #onReceiveProgress: onReceiveProgress,
              #queryParameters: queryParameters,
              #cancelToken: cancelToken,
              #deleteOnError: deleteOnError,
              #fileAccessMode: fileAccessMode,
              #lengthHeader: lengthHeader,
              #data: data,
              #options: options,
            },
          ),
        )),
      ) as _i12.Future<_i8.Response<dynamic>>);

  @override
  _i12.Future<_i8.Response<dynamic>> downloadUri(
    Uri? uri,
    dynamic savePath, {
    _i4.ProgressCallback? onReceiveProgress,
    _i16.CancelToken? cancelToken,
    bool? deleteOnError = true,
    _i4.FileAccessMode? fileAccessMode = _i4.FileAccessMode.write,
    String? lengthHeader = 'content-length',
    Object? data,
    _i4.Options? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #downloadUri,
          [
            uri,
            savePath,
          ],
          {
            #onReceiveProgress: onReceiveProgress,
            #cancelToken: cancelToken,
            #deleteOnError: deleteOnError,
            #fileAccessMode: fileAccessMode,
            #lengthHeader: lengthHeader,
            #data: data,
            #options: options,
          },
        ),
        returnValue:
            _i12.Future<_i8.Response<dynamic>>.value(_FakeResponse_8<dynamic>(
          this,
          Invocation.method(
            #downloadUri,
            [
              uri,
              savePath,
            ],
            {
              #onReceiveProgress: onReceiveProgress,
              #cancelToken: cancelToken,
              #deleteOnError: deleteOnError,
              #fileAccessMode: fileAccessMode,
              #lengthHeader: lengthHeader,
              #data: data,
              #options: options,
            },
          ),
        )),
      ) as _i12.Future<_i8.Response<dynamic>>);

  @override
  _i12.Future<_i8.Response<T>> request<T>(
    String? url, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i16.CancelToken? cancelToken,
    _i4.Options? options,
    _i4.ProgressCallback? onSendProgress,
    _i4.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #request,
          [url],
          {
            #data: data,
            #queryParameters: queryParameters,
            #cancelToken: cancelToken,
            #options: options,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i12.Future<_i8.Response<T>>.value(_FakeResponse_8<T>(
          this,
          Invocation.method(
            #request,
            [url],
            {
              #data: data,
              #queryParameters: queryParameters,
              #cancelToken: cancelToken,
              #options: options,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i12.Future<_i8.Response<T>>);

  @override
  _i12.Future<_i8.Response<T>> requestUri<T>(
    Uri? uri, {
    Object? data,
    _i16.CancelToken? cancelToken,
    _i4.Options? options,
    _i4.ProgressCallback? onSendProgress,
    _i4.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestUri,
          [uri],
          {
            #data: data,
            #cancelToken: cancelToken,
            #options: options,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i12.Future<_i8.Response<T>>.value(_FakeResponse_8<T>(
          this,
          Invocation.method(
            #requestUri,
            [uri],
            {
              #data: data,
              #cancelToken: cancelToken,
              #options: options,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i12.Future<_i8.Response<T>>);

  @override
  _i12.Future<_i8.Response<T>> fetch<T>(_i4.RequestOptions? requestOptions) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetch,
          [requestOptions],
        ),
        returnValue: _i12.Future<_i8.Response<T>>.value(_FakeResponse_8<T>(
          this,
          Invocation.method(
            #fetch,
            [requestOptions],
          ),
        )),
      ) as _i12.Future<_i8.Response<T>>);

  @override
  _i9.Dio clone({
    _i4.BaseOptions? options,
    _i7.Interceptors? interceptors,
    _i5.HttpClientAdapter? httpClientAdapter,
    _i6.Transformer? transformer,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clone,
          [],
          {
            #options: options,
            #interceptors: interceptors,
            #httpClientAdapter: httpClientAdapter,
            #transformer: transformer,
          },
        ),
        returnValue: _FakeDio_9(
          this,
          Invocation.method(
            #clone,
            [],
            {
              #options: options,
              #interceptors: interceptors,
              #httpClientAdapter: httpClientAdapter,
              #transformer: transformer,
            },
          ),
        ),
      ) as _i9.Dio);
}

/// A class which mocks [File].
///
/// See the documentation for Mockito's code generation for more information.
class MockFile extends _i1.Mock implements _i10.File {
  MockFile() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.File get absolute => (super.noSuchMethod(
        Invocation.getter(#absolute),
        returnValue: _FakeFile_10(
          this,
          Invocation.getter(#absolute),
        ),
      ) as _i10.File);

  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
      ) as String);

  @override
  Uri get uri => (super.noSuchMethod(
        Invocation.getter(#uri),
        returnValue: _FakeUri_11(
          this,
          Invocation.getter(#uri),
        ),
      ) as Uri);

  @override
  bool get isAbsolute => (super.noSuchMethod(
        Invocation.getter(#isAbsolute),
        returnValue: false,
      ) as bool);

  @override
  _i10.Directory get parent => (super.noSuchMethod(
        Invocation.getter(#parent),
        returnValue: _FakeDirectory_12(
          this,
          Invocation.getter(#parent),
        ),
      ) as _i10.Directory);

  @override
  _i12.Future<_i10.File> create({
    bool? recursive = false,
    bool? exclusive = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [],
          {
            #recursive: recursive,
            #exclusive: exclusive,
          },
        ),
        returnValue: _i12.Future<_i10.File>.value(_FakeFile_10(
          this,
          Invocation.method(
            #create,
            [],
            {
              #recursive: recursive,
              #exclusive: exclusive,
            },
          ),
        )),
      ) as _i12.Future<_i10.File>);

  @override
  void createSync({
    bool? recursive = false,
    bool? exclusive = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #createSync,
          [],
          {
            #recursive: recursive,
            #exclusive: exclusive,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i12.Future<_i10.File> rename(String? newPath) => (super.noSuchMethod(
        Invocation.method(
          #rename,
          [newPath],
        ),
        returnValue: _i12.Future<_i10.File>.value(_FakeFile_10(
          this,
          Invocation.method(
            #rename,
            [newPath],
          ),
        )),
      ) as _i12.Future<_i10.File>);

  @override
  _i10.File renameSync(String? newPath) => (super.noSuchMethod(
        Invocation.method(
          #renameSync,
          [newPath],
        ),
        returnValue: _FakeFile_10(
          this,
          Invocation.method(
            #renameSync,
            [newPath],
          ),
        ),
      ) as _i10.File);

  @override
  _i12.Future<_i10.FileSystemEntity> delete({bool? recursive = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {#recursive: recursive},
        ),
        returnValue:
            _i12.Future<_i10.FileSystemEntity>.value(_FakeFileSystemEntity_13(
          this,
          Invocation.method(
            #delete,
            [],
            {#recursive: recursive},
          ),
        )),
      ) as _i12.Future<_i10.FileSystemEntity>);

  @override
  void deleteSync({bool? recursive = false}) => super.noSuchMethod(
        Invocation.method(
          #deleteSync,
          [],
          {#recursive: recursive},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i12.Future<_i10.File> copy(String? newPath) => (super.noSuchMethod(
        Invocation.method(
          #copy,
          [newPath],
        ),
        returnValue: _i12.Future<_i10.File>.value(_FakeFile_10(
          this,
          Invocation.method(
            #copy,
            [newPath],
          ),
        )),
      ) as _i12.Future<_i10.File>);

  @override
  _i10.File copySync(String? newPath) => (super.noSuchMethod(
        Invocation.method(
          #copySync,
          [newPath],
        ),
        returnValue: _FakeFile_10(
          this,
          Invocation.method(
            #copySync,
            [newPath],
          ),
        ),
      ) as _i10.File);

  @override
  _i12.Future<int> length() => (super.noSuchMethod(
        Invocation.method(
          #length,
          [],
        ),
        returnValue: _i12.Future<int>.value(0),
      ) as _i12.Future<int>);

  @override
  int lengthSync() => (super.noSuchMethod(
        Invocation.method(
          #lengthSync,
          [],
        ),
        returnValue: 0,
      ) as int);

  @override
  _i12.Future<DateTime> lastAccessed() => (super.noSuchMethod(
        Invocation.method(
          #lastAccessed,
          [],
        ),
        returnValue: _i12.Future<DateTime>.value(_FakeDateTime_14(
          this,
          Invocation.method(
            #lastAccessed,
            [],
          ),
        )),
      ) as _i12.Future<DateTime>);

  @override
  DateTime lastAccessedSync() => (super.noSuchMethod(
        Invocation.method(
          #lastAccessedSync,
          [],
        ),
        returnValue: _FakeDateTime_14(
          this,
          Invocation.method(
            #lastAccessedSync,
            [],
          ),
        ),
      ) as DateTime);

  @override
  _i12.Future<dynamic> setLastAccessed(DateTime? time) => (super.noSuchMethod(
        Invocation.method(
          #setLastAccessed,
          [time],
        ),
        returnValue: _i12.Future<dynamic>.value(),
      ) as _i12.Future<dynamic>);

  @override
  void setLastAccessedSync(DateTime? time) => super.noSuchMethod(
        Invocation.method(
          #setLastAccessedSync,
          [time],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i12.Future<DateTime> lastModified() => (super.noSuchMethod(
        Invocation.method(
          #lastModified,
          [],
        ),
        returnValue: _i12.Future<DateTime>.value(_FakeDateTime_14(
          this,
          Invocation.method(
            #lastModified,
            [],
          ),
        )),
      ) as _i12.Future<DateTime>);

  @override
  DateTime lastModifiedSync() => (super.noSuchMethod(
        Invocation.method(
          #lastModifiedSync,
          [],
        ),
        returnValue: _FakeDateTime_14(
          this,
          Invocation.method(
            #lastModifiedSync,
            [],
          ),
        ),
      ) as DateTime);

  @override
  _i12.Future<dynamic> setLastModified(DateTime? time) => (super.noSuchMethod(
        Invocation.method(
          #setLastModified,
          [time],
        ),
        returnValue: _i12.Future<dynamic>.value(),
      ) as _i12.Future<dynamic>);

  @override
  void setLastModifiedSync(DateTime? time) => super.noSuchMethod(
        Invocation.method(
          #setLastModifiedSync,
          [time],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i12.Future<_i10.RandomAccessFile> open(
          {_i10.FileMode? mode = _i10.FileMode.read}) =>
      (super.noSuchMethod(
        Invocation.method(
          #open,
          [],
          {#mode: mode},
        ),
        returnValue:
            _i12.Future<_i10.RandomAccessFile>.value(_FakeRandomAccessFile_15(
          this,
          Invocation.method(
            #open,
            [],
            {#mode: mode},
          ),
        )),
      ) as _i12.Future<_i10.RandomAccessFile>);

  @override
  _i10.RandomAccessFile openSync({_i10.FileMode? mode = _i10.FileMode.read}) =>
      (super.noSuchMethod(
        Invocation.method(
          #openSync,
          [],
          {#mode: mode},
        ),
        returnValue: _FakeRandomAccessFile_15(
          this,
          Invocation.method(
            #openSync,
            [],
            {#mode: mode},
          ),
        ),
      ) as _i10.RandomAccessFile);

  @override
  _i12.Stream<List<int>> openRead([
    int? start,
    int? end,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #openRead,
          [
            start,
            end,
          ],
        ),
        returnValue: _i12.Stream<List<int>>.empty(),
      ) as _i12.Stream<List<int>>);

  @override
  _i10.IOSink openWrite({
    _i10.FileMode? mode = _i10.FileMode.write,
    _i17.Encoding? encoding = const _i17.Utf8Codec(),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #openWrite,
          [],
          {
            #mode: mode,
            #encoding: encoding,
          },
        ),
        returnValue: _FakeIOSink_16(
          this,
          Invocation.method(
            #openWrite,
            [],
            {
              #mode: mode,
              #encoding: encoding,
            },
          ),
        ),
      ) as _i10.IOSink);

  @override
  _i12.Future<_i13.Uint8List> readAsBytes() => (super.noSuchMethod(
        Invocation.method(
          #readAsBytes,
          [],
        ),
        returnValue: _i12.Future<_i13.Uint8List>.value(_i13.Uint8List(0)),
      ) as _i12.Future<_i13.Uint8List>);

  @override
  _i13.Uint8List readAsBytesSync() => (super.noSuchMethod(
        Invocation.method(
          #readAsBytesSync,
          [],
        ),
        returnValue: _i13.Uint8List(0),
      ) as _i13.Uint8List);

  @override
  _i12.Future<String> readAsString(
          {_i17.Encoding? encoding = const _i17.Utf8Codec()}) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAsString,
          [],
          {#encoding: encoding},
        ),
        returnValue: _i12.Future<String>.value(_i14.dummyValue<String>(
          this,
          Invocation.method(
            #readAsString,
            [],
            {#encoding: encoding},
          ),
        )),
      ) as _i12.Future<String>);

  @override
  String readAsStringSync({_i17.Encoding? encoding = const _i17.Utf8Codec()}) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAsStringSync,
          [],
          {#encoding: encoding},
        ),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.method(
            #readAsStringSync,
            [],
            {#encoding: encoding},
          ),
        ),
      ) as String);

  @override
  _i12.Future<List<String>> readAsLines(
          {_i17.Encoding? encoding = const _i17.Utf8Codec()}) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAsLines,
          [],
          {#encoding: encoding},
        ),
        returnValue: _i12.Future<List<String>>.value(<String>[]),
      ) as _i12.Future<List<String>>);

  @override
  List<String> readAsLinesSync(
          {_i17.Encoding? encoding = const _i17.Utf8Codec()}) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAsLinesSync,
          [],
          {#encoding: encoding},
        ),
        returnValue: <String>[],
      ) as List<String>);

  @override
  _i12.Future<_i10.File> writeAsBytes(
    List<int>? bytes, {
    _i10.FileMode? mode = _i10.FileMode.write,
    bool? flush = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeAsBytes,
          [bytes],
          {
            #mode: mode,
            #flush: flush,
          },
        ),
        returnValue: _i12.Future<_i10.File>.value(_FakeFile_10(
          this,
          Invocation.method(
            #writeAsBytes,
            [bytes],
            {
              #mode: mode,
              #flush: flush,
            },
          ),
        )),
      ) as _i12.Future<_i10.File>);

  @override
  void writeAsBytesSync(
    List<int>? bytes, {
    _i10.FileMode? mode = _i10.FileMode.write,
    bool? flush = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #writeAsBytesSync,
          [bytes],
          {
            #mode: mode,
            #flush: flush,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i12.Future<_i10.File> writeAsString(
    String? contents, {
    _i10.FileMode? mode = _i10.FileMode.write,
    _i17.Encoding? encoding = const _i17.Utf8Codec(),
    bool? flush = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeAsString,
          [contents],
          {
            #mode: mode,
            #encoding: encoding,
            #flush: flush,
          },
        ),
        returnValue: _i12.Future<_i10.File>.value(_FakeFile_10(
          this,
          Invocation.method(
            #writeAsString,
            [contents],
            {
              #mode: mode,
              #encoding: encoding,
              #flush: flush,
            },
          ),
        )),
      ) as _i12.Future<_i10.File>);

  @override
  void writeAsStringSync(
    String? contents, {
    _i10.FileMode? mode = _i10.FileMode.write,
    _i17.Encoding? encoding = const _i17.Utf8Codec(),
    bool? flush = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #writeAsStringSync,
          [contents],
          {
            #mode: mode,
            #encoding: encoding,
            #flush: flush,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i12.Future<bool> exists() => (super.noSuchMethod(
        Invocation.method(
          #exists,
          [],
        ),
        returnValue: _i12.Future<bool>.value(false),
      ) as _i12.Future<bool>);

  @override
  bool existsSync() => (super.noSuchMethod(
        Invocation.method(
          #existsSync,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i12.Future<String> resolveSymbolicLinks() => (super.noSuchMethod(
        Invocation.method(
          #resolveSymbolicLinks,
          [],
        ),
        returnValue: _i12.Future<String>.value(_i14.dummyValue<String>(
          this,
          Invocation.method(
            #resolveSymbolicLinks,
            [],
          ),
        )),
      ) as _i12.Future<String>);

  @override
  String resolveSymbolicLinksSync() => (super.noSuchMethod(
        Invocation.method(
          #resolveSymbolicLinksSync,
          [],
        ),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.method(
            #resolveSymbolicLinksSync,
            [],
          ),
        ),
      ) as String);

  @override
  _i12.Future<_i10.FileStat> stat() => (super.noSuchMethod(
        Invocation.method(
          #stat,
          [],
        ),
        returnValue: _i12.Future<_i10.FileStat>.value(_FakeFileStat_17(
          this,
          Invocation.method(
            #stat,
            [],
          ),
        )),
      ) as _i12.Future<_i10.FileStat>);

  @override
  _i10.FileStat statSync() => (super.noSuchMethod(
        Invocation.method(
          #statSync,
          [],
        ),
        returnValue: _FakeFileStat_17(
          this,
          Invocation.method(
            #statSync,
            [],
          ),
        ),
      ) as _i10.FileStat);

  @override
  _i12.Stream<_i10.FileSystemEvent> watch({
    int? events = 15,
    bool? recursive = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #watch,
          [],
          {
            #events: events,
            #recursive: recursive,
          },
        ),
        returnValue: _i12.Stream<_i10.FileSystemEvent>.empty(),
      ) as _i12.Stream<_i10.FileSystemEvent>);
}
